"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _pathExists = _interopRequireDefault(require("path-exists"));

var _lodash = _interopRequireDefault(require("lodash.merge"));

var _invariant = _interopRequireDefault(require("invariant"));

var _stripIndent = _interopRequireDefault(require("strip-indent"));

var _commonTags = require("common-tags");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var noop = function noop() {};

module.exports = pluginTester;
var fullDefaultConfig = {
  babelOptions: {
    parserOpts: {},
    generatorOpts: {},
    babelrc: false
  }
};

function pluginTester() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref$babel = _ref.babel,
      babel = _ref$babel === void 0 ? require('@babel/core') : _ref$babel,
      _ref$plugin = _ref.plugin,
      plugin = _ref$plugin === void 0 ? requiredParam('plugin') : _ref$plugin,
      _ref$pluginName = _ref.pluginName,
      pluginName = _ref$pluginName === void 0 ? getPluginName(plugin, babel) : _ref$pluginName,
      _ref$title = _ref.title,
      describeBlockTitle = _ref$title === void 0 ? pluginName : _ref$title,
      pluginOptions = _ref.pluginOptions,
      tests = _ref.tests,
      fixtures = _ref.fixtures,
      _ref$fixtureOutputNam = _ref.fixtureOutputName,
      fixtureOutputName = _ref$fixtureOutputNam === void 0 ? 'output' : _ref$fixtureOutputNam,
      filename = _ref.filename,
      rest = _objectWithoutProperties(_ref, ["babel", "plugin", "pluginName", "title", "pluginOptions", "tests", "fixtures", "fixtureOutputName", "filename"]);

  var testNumber = 1;

  if (fixtures) {
    testFixtures(_objectSpread({
      plugin,
      pluginName,
      pluginOptions,
      title: describeBlockTitle,
      fixtures,
      fixtureOutputName,
      filename,
      babel
    }, rest));
  }

  var testAsArray = toTestArray(tests);

  if (!testAsArray.length) {
    return;
  }

  var testerConfig = (0, _lodash.default)({}, fullDefaultConfig, rest);
  describe(describeBlockTitle, function () {
    testAsArray.forEach(function (testConfig) {
      if (!testConfig) {
        return;
      }

      var _merge = (0, _lodash.default)({}, testerConfig, toTestConfig(testConfig)),
          skip = _merge.skip,
          only = _merge.only,
          title = _merge.title,
          code = _merge.code,
          babelOptions = _merge.babelOptions,
          output = _merge.output,
          snapshot = _merge.snapshot,
          error = _merge.error,
          _merge$setup = _merge.setup,
          setup = _merge$setup === void 0 ? noop : _merge$setup,
          teardown = _merge.teardown,
          _merge$formatResult = _merge.formatResult,
          formatResult = _merge$formatResult === void 0 ? function (r) {
        return r;
      } : _merge$formatResult;

      (0, _assert.default)(!skip && !only || skip !== only, 'Cannot enable both skip and only on a test');

      if (skip) {
        // eslint-disable-next-line jest/no-disabled-tests
        it.skip(title, testerWrapper);
      } else if (only) {
        // eslint-disable-next-line jest/no-focused-tests
        it.only(title, testerWrapper);
      } else {
        it(title, testerWrapper);
      }

      function testerWrapper() {
        return _testerWrapper.apply(this, arguments);
      } // eslint-disable-next-line complexity


      function _testerWrapper() {
        _testerWrapper = _asyncToGenerator(function* () {
          var teardowns = teardown ? [teardown] : [];
          var returnedTeardown;

          try {
            returnedTeardown = yield setup();
          } catch (e) {
            // eslint-disable-next-line no-console
            console.error('There was a problem during setup');
            throw e;
          }

          if (typeof returnedTeardown === 'function') {
            teardowns.push(returnedTeardown);
          }

          try {
            tester();
          } finally {
            try {
              yield Promise.all(teardowns.map(function (t) {
                return t();
              }));
            } catch (e) {
              // eslint-disable-next-line no-console
              console.error('There was a problem during teardown'); // eslint-disable-next-line no-unsafe-finally

              throw e;
            }
          }
        });
        return _testerWrapper.apply(this, arguments);
      }

      function tester() {
        (0, _invariant.default)(code, _commonTags.oneLine`
            A string or object with a \`code\` or
            \`fixture\` property must be provided
          `);
        (0, _invariant.default)(!babelOptions.babelrc || babelOptions.filename, 'babelrc set to true, but no filename specified in babelOptions');
        (0, _invariant.default)(!snapshot || !output, '`output` cannot be provided with `snapshot: true`');
        var result;
        var errored = false;

        try {
          result = formatResult(babel.transform(code, babelOptions).code.trim());
        } catch (err) {
          if (error) {
            errored = true;
            result = err;
          } else {
            throw err;
          }
        }

        var expectedToThrowButDidNot = error && !errored;
        (0, _assert.default)(!expectedToThrowButDidNot, 'Expected to throw error, but it did not.');

        if (snapshot) {
          (0, _invariant.default)(result !== code, _commonTags.oneLine`
              Code was unmodified but attempted to take a snapshot.
              If the code should not be modified, set \`snapshot: false\`
            `);
          var separator = '\n\n      ↓ ↓ ↓ ↓ ↓ ↓\n\n';
          var formattedOutput = [code, separator, result].join('');
          expect(`\n${formattedOutput}\n`).toMatchSnapshot(title);
        } else if (error) {
          assertError(result, error);
        } else if (typeof output === 'string') {
          _assert.default.equal(result, output, 'Output is incorrect.');
        } else {
          _assert.default.equal(result, code, 'Expected output to not change, but it did');
        }
      }
    });
  });

  function toTestConfig(testConfig) {
    if (typeof testConfig === 'string') {
      testConfig = {
        code: testConfig
      };
    }

    var _testConfig = testConfig,
        title = _testConfig.title,
        fixture = _testConfig.fixture,
        _testConfig$code = _testConfig.code,
        code = _testConfig$code === void 0 ? getCode(filename, fixture) : _testConfig$code,
        _testConfig$fullTitle = _testConfig.fullTitle,
        fullTitle = _testConfig$fullTitle === void 0 ? title || `${testNumber++}. ${pluginName}` : _testConfig$fullTitle,
        _testConfig$output = _testConfig.output,
        output = _testConfig$output === void 0 ? getCode(filename, testConfig.outputFixture) || undefined : _testConfig$output,
        _testConfig$pluginOpt = _testConfig.pluginOptions,
        testOptions = _testConfig$pluginOpt === void 0 ? pluginOptions : _testConfig$pluginOpt;
    return (0, _lodash.default)({
      babelOptions: {
        filename: getPath(filename, fixture)
      }
    }, testConfig, _objectSpread({
      babelOptions: {
        plugins: [[plugin, testOptions]]
      },
      title: fullTitle,
      code: (0, _stripIndent.default)(code).trim()
    }, output ? {
      output: (0, _stripIndent.default)(output).trim()
    } : {}));
  }
}

var createFixtureTests = function createFixtureTests(fixturesDir, options) {
  if (!_fs.default.statSync(fixturesDir).isDirectory()) return;

  var rootOptionsPath = _path.default.join(fixturesDir, 'options.json');

  var rootFixtureOptions = {};

  if (_pathExists.default.sync(rootOptionsPath)) {
    rootFixtureOptions = require(rootOptionsPath);
  }

  _fs.default.readdirSync(fixturesDir).forEach(function (caseName) {
    var fixtureDir = _path.default.join(fixturesDir, caseName);

    var optionsPath = _path.default.join(fixtureDir, 'options.json');

    var jsCodePath = _path.default.join(fixtureDir, 'code.js');

    var tsCodePath = _path.default.join(fixtureDir, 'code.ts');

    var blockTitle = caseName.split('-').join(' ');
    var codePath = _pathExists.default.sync(jsCodePath) && jsCodePath || _pathExists.default.sync(tsCodePath) && tsCodePath;
    var fixturePluginOptions = {};

    if (_pathExists.default.sync(optionsPath)) {
      fixturePluginOptions = require(optionsPath);
    }

    if (!codePath) {
      describe(blockTitle, function () {
        createFixtureTests(fixtureDir, _objectSpread({}, options, {
          pluginOptions: _objectSpread({}, rootFixtureOptions, options.pluginOptions, fixturePluginOptions)
        }));
      });
      return;
    }

    var ext = /\.ts$/.test(codePath) ? '.ts' : '.js';
    it(blockTitle, function () {
      var plugin = options.plugin,
          pluginOptions = options.pluginOptions,
          fixtureOutputName = options.fixtureOutputName,
          babel = options.babel,
          _options$formatResult = options.formatResult,
          formatResult = _options$formatResult === void 0 ? function (r) {
        return r;
      } : _options$formatResult,
          rest = _objectWithoutProperties(options, ["plugin", "pluginOptions", "fixtureOutputName", "babel", "formatResult"]);

      var babelRcPath = _path.default.join(fixtureDir, '.babelrc');

      var _merge2 = (0, _lodash.default)({}, fullDefaultConfig, {
        babelOptions: {
          plugins: [[plugin, _objectSpread({}, rootFixtureOptions, pluginOptions, fixturePluginOptions)]],
          // if they have a babelrc, then we'll let them use that
          // otherwise, we'll just use our simple config
          babelrc: _pathExists.default.sync(babelRcPath)
        }
      }, rest),
          babelOptions = _merge2.babelOptions;

      var actual = formatResult(babel.transformFileSync(codePath, babelOptions).code.trim());

      var outputPath = _path.default.join(fixtureDir, `${fixtureOutputName}${ext}`);

      if (!_fs.default.existsSync(outputPath)) {
        _fs.default.writeFileSync(outputPath, actual);

        return;
      }

      var output = _fs.default.readFileSync(outputPath, 'utf8').trim();

      _assert.default.equal(actual, output, `actual output does not match ${fixtureOutputName}${ext}`);
    });
  });
};

function testFixtures(_ref2) {
  var describeBlockTitle = _ref2.title,
      fixtures = _ref2.fixtures,
      filename = _ref2.filename,
      rest = _objectWithoutProperties(_ref2, ["title", "fixtures", "filename"]);

  describe(`${describeBlockTitle} fixtures`, function () {
    var fixturesDir = getPath(filename, fixtures);
    createFixtureTests(fixturesDir, rest);
  });
}

function toTestArray(tests) {
  tests = tests || []; // null/0/false are ok, so no default param

  if (Array.isArray(tests)) {
    return tests;
  }

  return Object.keys(tests).reduce(function (testsArray, key) {
    var value = tests[key];

    if (typeof value === 'string') {
      value = {
        code: value
      };
    }

    testsArray.push(_objectSpread({
      title: key
    }, value));
    return testsArray;
  }, []);
}

function getCode(filename, fixture) {
  if (!fixture) {
    return '';
  }

  return _fs.default.readFileSync(getPath(filename, fixture), 'utf8');
}

function getPath(filename, basename) {
  if (!basename) {
    return undefined;
  }

  if (_path.default.isAbsolute(basename)) {
    return basename;
  }

  return _path.default.join(_path.default.dirname(filename), basename);
} // eslint-disable-next-line complexity


function assertError(result, error) {
  if (typeof error === 'function') {
    if (!(result instanceof error || error(result) === true)) {
      throw result;
    }
  } else if (typeof error === 'string') {
    (0, _assert.default)(result.message.includes(error), 'Error message is incorrect');
  } else if (error instanceof RegExp) {
    (0, _assert.default)(error.test(result.message), `Expected ${result.message} to match ${error}`);
  } else {
    (0, _invariant.default)(typeof error === 'boolean', 'The given `error` must be a function, string, boolean, or RegExp');
  }
}

function requiredParam(name) {
  throw new Error(`${name} is a required parameter.`);
}

function getPluginName(plugin, babel) {
  var name;

  try {
    name = plugin(babel).name;
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error(_commonTags.oneLine`
        Attempting to infer the name of your plugin failed.
        Tried to invoke the plugin which threw the error.
      `);
    throw error;
  }

  (0, _invariant.default)(name, 'The `pluginName` must be inferable or provided.');
  return name;
}
/*
eslint
  complexity: "off"
*/